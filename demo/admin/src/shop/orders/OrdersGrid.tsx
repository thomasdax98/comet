// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { useApolloClient, useQuery } from "@apollo/client";
import {
    CrudContextMenu,
    GridFilterButton,
    muiGridFilterToGql,
    muiGridSortToGql,
    StackLink,
    Toolbar,
    ToolbarAutomaticTitleItem,
    ToolbarFillSpace,
    ToolbarItem,
    useBufferedRowCount,
    useDataGridRemote,
    usePersistentColumnState,
} from "@comet/admin";
import { Add as AddIcon, Edit } from "@comet/admin-icons";
import { Box, Button, IconButton } from "@mui/material";
import { DataGridPro, GridColDef, GridToolbarQuickFilter } from "@mui/x-data-grid-pro";
import gql from "graphql-tag";
import * as React from "react";
import { FormattedMessage, useIntl } from "react-intl";

import {
    GQLCreateOrderMutation,
    GQLCreateOrderMutationVariables,
    GQLDeleteOrderMutation,
    GQLDeleteOrderMutationVariables,
    GQLOrdersGridQuery,
    GQLOrdersGridQueryVariables,
    GQLOrdersListFragment,
} from "./OrdersGrid.generated";

const ordersFragment = gql`
    fragment OrdersList on Order {
        id
        updatedAt
        totalAmountPaid
        isPaid
        customer {
            id
        }
        products {
            id
        }
        date
        createdAt
    }
`;

const ordersQuery = gql`
    query OrdersGrid($offset: Int, $limit: Int, $sort: [OrderSort!], $search: String, $filter: OrderFilter) {
        orders(offset: $offset, limit: $limit, sort: $sort, search: $search, filter: $filter) {
            nodes {
                ...OrdersList
            }
            totalCount
        }
    }
    ${ordersFragment}
`;

const deleteOrderMutation = gql`
    mutation DeleteOrder($id: ID!) {
        deleteOrder(id: $id)
    }
`;

const createOrderMutation = gql`
    mutation CreateOrder($input: OrderInput!) {
        createOrder(input: $input) {
            id
        }
    }
`;

function OrdersGridToolbar() {
    return (
        <Toolbar>
            <ToolbarAutomaticTitleItem />
            <ToolbarItem>
                <GridToolbarQuickFilter />
            </ToolbarItem>
            <ToolbarFillSpace />
            <ToolbarItem>
                <GridFilterButton />
            </ToolbarItem>
            <ToolbarItem>
                <Button startIcon={<AddIcon />} component={StackLink} pageName="add" payload="add" variant="contained" color="primary">
                    <FormattedMessage id="order.newOrder" defaultMessage="New Order" />
                </Button>
            </ToolbarItem>
        </Toolbar>
    );
}

export function OrdersGrid(): React.ReactElement {
    const client = useApolloClient();
    const intl = useIntl();
    const dataGridProps = { ...useDataGridRemote(), ...usePersistentColumnState("OrdersGrid") };

    const columns: GridColDef<GQLOrdersListFragment>[] = [
        {
            field: "updatedAt",
            headerName: intl.formatMessage({ id: "order.updatedAt", defaultMessage: "Updated At" }),
            type: "dateTime",
            valueGetter: ({ value }) => value && new Date(value),
            width: 150,
        },
        {
            field: "totalAmountPaid",
            headerName: intl.formatMessage({ id: "order.totalAmountPaid", defaultMessage: "Total Amount Paid" }),
            type: "number",
            width: 150,
        },
        { field: "isPaid", headerName: intl.formatMessage({ id: "order.isPaid", defaultMessage: "Is Paid" }), type: "boolean", width: 150 },
        {
            field: "date",
            headerName: intl.formatMessage({ id: "order.date", defaultMessage: "Date" }),
            type: "dateTime",
            valueGetter: ({ value }) => value && new Date(value),
            width: 150,
        },
        {
            field: "createdAt",
            headerName: intl.formatMessage({ id: "order.createdAt", defaultMessage: "Created At" }),
            type: "dateTime",
            valueGetter: ({ value }) => value && new Date(value),
            width: 150,
        },
        {
            field: "actions",
            headerName: "",
            sortable: false,
            filterable: false,
            type: "actions",
            renderCell: (params) => {
                return (
                    <>
                        <IconButton component={StackLink} pageName="edit" payload={params.row.id}>
                            <Edit color="primary" />
                        </IconButton>
                        <CrudContextMenu
                            copyData={() => {
                                const row = params.row;
                                return {
                                    isPaid: row.isPaid,
                                    date: row.date,
                                    products: row.products.map((product) => product.id),
                                    customer: row.customer.id,
                                };
                            }}
                            onPaste={async ({ input }) => {
                                await client.mutate<GQLCreateOrderMutation, GQLCreateOrderMutationVariables>({
                                    mutation: createOrderMutation,
                                    variables: { input },
                                });
                            }}
                            onDelete={async () => {
                                await client.mutate<GQLDeleteOrderMutation, GQLDeleteOrderMutationVariables>({
                                    mutation: deleteOrderMutation,
                                    variables: { id: params.row.id },
                                });
                            }}
                            refetchQueries={[ordersQuery]}
                        />
                    </>
                );
            },
        },
    ];

    const { filter: gqlFilter, search: gqlSearch } = muiGridFilterToGql(columns, dataGridProps.filterModel);

    const { data, loading, error } = useQuery<GQLOrdersGridQuery, GQLOrdersGridQueryVariables>(ordersQuery, {
        variables: {
            filter: gqlFilter,
            search: gqlSearch,
            offset: dataGridProps.page * dataGridProps.pageSize,
            limit: dataGridProps.pageSize,
            sort: muiGridSortToGql(dataGridProps.sortModel),
        },
    });
    const rowCount = useBufferedRowCount(data?.orders.totalCount);
    if (error) throw error;
    const rows = data?.orders.nodes ?? [];

    return (
        <Box sx={{ height: `calc(100vh - var(--comet-admin-master-layout-content-top-spacing))` }}>
            <DataGridPro
                {...dataGridProps}
                disableSelectionOnClick
                rows={rows}
                rowCount={rowCount}
                columns={columns}
                loading={loading}
                components={{
                    Toolbar: OrdersGridToolbar,
                }}
            />
        </Box>
    );
}
