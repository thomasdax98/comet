// This file has been generated by comet admin-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.

import { useApolloClient, useQuery } from "@apollo/client";
import {
    Field,
    FinalForm,
    FinalFormCheckbox,
    FinalFormInput,
    FinalFormSaveSplitButton,
    FinalFormSubmitEvent,
    MainContent,
    Toolbar,
    ToolbarActions,
    ToolbarFillSpace,
    ToolbarItem,
    ToolbarTitleItem,
    useFormApiRef,
    useStackApi,
    useStackSwitchApi,
} from "@comet/admin";
import { FinalFormDatePicker } from "@comet/admin-date-time";
import { ArrowLeft } from "@comet/admin-icons";
import { EditPageLayout, queryUpdatedAt, resolveHasSaveConflict, useFormSaveConflict } from "@comet/cms-admin";
import { CircularProgress, FormControlLabel, IconButton } from "@mui/material";
import { FormApi } from "final-form";
import { filter } from "graphql-anywhere";
import React from "react";
import { FormattedMessage } from "react-intl";

import { createOrderMutation, orderFormFragment, orderFormQuery, updateOrderMutation } from "./OrderForm.gql";
import {
    GQLCreateOrderMutation,
    GQLCreateOrderMutationVariables,
    GQLOrderFormFragment,
    GQLOrderFormQuery,
    GQLOrderFormQueryVariables,
    GQLUpdateOrderMutation,
    GQLUpdateOrderMutationVariables,
} from "./OrderForm.gql.generated";

type FormValues = Omit<GQLOrderFormFragment, "totalAmountPaid"> & {
    totalAmountPaid: string;
};

interface FormProps {
    id?: string;
}

export function OrderForm({ id }: FormProps): React.ReactElement {
    const stackApi = useStackApi();
    const client = useApolloClient();
    const mode = id ? "edit" : "add";
    const formApiRef = useFormApiRef<FormValues>();
    const stackSwitchApi = useStackSwitchApi();

    const { data, error, loading, refetch } = useQuery<GQLOrderFormQuery, GQLOrderFormQueryVariables>(
        orderFormQuery,
        id ? { variables: { id } } : { skip: true },
    );

    const initialValues = React.useMemo<Partial<FormValues>>(
        () =>
            data?.order
                ? {
                      ...filter<GQLOrderFormFragment>(orderFormFragment, data.order),
                      totalAmountPaid: String(data.order.totalAmountPaid),
                  }
                : {},
        [data],
    );

    const saveConflict = useFormSaveConflict({
        checkConflict: async () => {
            const updatedAt = await queryUpdatedAt(client, "order", id);
            return resolveHasSaveConflict(data?.order.updatedAt, updatedAt);
        },
        formApiRef,
        loadLatestVersion: async () => {
            await refetch();
        },
    });

    const handleSubmit = async (state: FormValues, form: FormApi<FormValues>, event: FinalFormSubmitEvent) => {
        if (await saveConflict.checkForConflicts()) {
            throw new Error("Conflicts detected");
        }

        const output = {
            ...state,
            totalAmountPaid: parseFloat(state.totalAmountPaid),
        };

        if (mode === "edit") {
            if (!id) {
                throw new Error("Missing id in edit mode");
            }
            await client.mutate<GQLUpdateOrderMutation, GQLUpdateOrderMutationVariables>({
                mutation: updateOrderMutation,
                variables: { id, input: output, lastUpdatedAt: data?.order?.updatedAt },
            });
        } else {
            const { data: mutationReponse } = await client.mutate<GQLCreateOrderMutation, GQLCreateOrderMutationVariables>({
                mutation: createOrderMutation,
                variables: { input: output },
            });
            if (!event.navigatingBack) {
                const id = mutationReponse?.createOrder.id;
                if (id) {
                    setTimeout(() => {
                        stackSwitchApi.activatePage("edit", id);
                    });
                }
            }
        }
    };

    if (error) throw error;

    if (loading) {
        return <CircularProgress />;
    }

    return (
        <FinalForm<FormValues>
            apiRef={formApiRef}
            onSubmit={handleSubmit}
            mode={mode}
            initialValues={initialValues}
            onAfterSubmit={(values, form) => {
                //don't go back automatically
            }}
        >
            {({ values }) => (
                <EditPageLayout>
                    {saveConflict.dialogs}
                    <Toolbar>
                        <ToolbarItem>
                            <IconButton onClick={stackApi?.goBack}>
                                <ArrowLeft />
                            </IconButton>
                        </ToolbarItem>
                        <ToolbarTitleItem>
                            {mode == "edit" ? (
                                <FormattedMessage id="orders.editOrder" defaultMessage="Edit Order" />
                            ) : (
                                <FormattedMessage id="orders.newOrder" defaultMessage="New Order" />
                            )}
                        </ToolbarTitleItem>
                        <ToolbarFillSpace />
                        <ToolbarActions>
                            <FinalFormSaveSplitButton />
                        </ToolbarActions>
                    </Toolbar>
                    <MainContent>
                        <Field
                            required
                            fullWidth
                            name="totalAmountPaid"
                            component={FinalFormInput}
                            type="number"
                            label={<FormattedMessage id="order.totalAmountPaid" defaultMessage="Total Amount Paid" />}
                        />
                        <Field name="isPaid" label="" type="checkbox" fullWidth>
                            {(props) => (
                                <FormControlLabel
                                    label={<FormattedMessage id="order.isPaid" defaultMessage="Is Paid" />}
                                    control={<FinalFormCheckbox {...props} />}
                                />
                            )}
                        </Field>
                        <Field
                            required
                            fullWidth
                            name="date"
                            component={FinalFormDatePicker}
                            label={<FormattedMessage id="order.date" defaultMessage="Date" />}
                        />
                    </MainContent>
                </EditPageLayout>
            )}
        </FinalForm>
    );
}
