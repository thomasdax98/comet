// This file has been generated by comet api-generator.
// You may choose to use this file as scaffold by moving this file out of generated folder and removing this comment.
import { extractGraphqlFields, SubjectEntity, validateNotModified } from "@comet/cms-api";
import { FindOptions, Reference } from "@mikro-orm/core";
import { InjectRepository } from "@mikro-orm/nestjs";
import { EntityManager, EntityRepository } from "@mikro-orm/postgresql";
import { Args, ID, Info, Mutation, Parent, Query, ResolveField, Resolver } from "@nestjs/graphql";
import { GraphQLResolveInfo } from "graphql";

import { Customer } from "../entities/customer.entity";
import { Order } from "../entities/order.entity";
import { Product } from "../entities/product.entity";
import { OrderInput, OrderUpdateInput } from "./dto/order.input";
import { OrdersArgs } from "./dto/orders.args";
import { PaginatedOrders } from "./dto/paginated-orders";
import { OrdersService } from "./orders.service";

@Resolver(() => Order)
export class OrderResolver {
    constructor(
        private readonly entityManager: EntityManager,
        private readonly ordersService: OrdersService,
        @InjectRepository(Order) private readonly repository: EntityRepository<Order>,
        @InjectRepository(Customer) private readonly customerRepository: EntityRepository<Customer>,
        @InjectRepository(Product) private readonly productRepository: EntityRepository<Product>,
    ) {}

    @Query(() => Order)
    @SubjectEntity(Order)
    async order(@Args("id", { type: () => ID }) id: string): Promise<Order> {
        const order = await this.repository.findOneOrFail(id);
        return order;
    }

    @Query(() => PaginatedOrders)
    async orders(@Args() { search, filter, sort, offset, limit }: OrdersArgs, @Info() info: GraphQLResolveInfo): Promise<PaginatedOrders> {
        const where = this.ordersService.getFindCondition({ search, filter });

        const fields = extractGraphqlFields(info, { root: "nodes" });
        const populate: string[] = [];
        if (fields.includes("customer")) {
            populate.push("customer");
        }
        if (fields.includes("products")) {
            populate.push("products");
        }

        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const options: FindOptions<Order, any> = { offset, limit, populate };

        if (sort) {
            options.orderBy = sort.map((sortItem) => {
                return {
                    [sortItem.field]: sortItem.direction,
                };
            });
        }

        const [entities, totalCount] = await this.repository.findAndCount(where, options);
        return new PaginatedOrders(entities, totalCount);
    }

    @Mutation(() => Order)
    async createOrder(@Args("input", { type: () => OrderInput }) input: OrderInput): Promise<Order> {
        const { products: productsInput, customer: customerInput, ...assignInput } = input;
        const order = this.repository.create({
            ...assignInput,

            customer: Reference.create(await this.customerRepository.findOneOrFail(customerInput)),
        });

        if (productsInput) {
            const products = await this.productRepository.find({ id: productsInput });
            if (products.length != productsInput.length) throw new Error("Couldn't find all products that were passed as input");
            await order.products.loadItems();
            order.products.set(products.map((product) => Reference.create(product)));
        }

        await this.entityManager.flush();

        return order;
    }

    @Mutation(() => Order)
    @SubjectEntity(Order)
    async updateOrder(
        @Args("id", { type: () => ID }) id: string,
        @Args("input", { type: () => OrderUpdateInput }) input: OrderUpdateInput,
        @Args("lastUpdatedAt", { type: () => Date, nullable: true }) lastUpdatedAt?: Date,
    ): Promise<Order> {
        const order = await this.repository.findOneOrFail(id);
        if (lastUpdatedAt) {
            validateNotModified(order, lastUpdatedAt);
        }

        const { products: productsInput, customer: customerInput, ...assignInput } = input;
        order.assign({
            ...assignInput,

            customer: Reference.create(await this.customerRepository.findOneOrFail(customerInput)),
        });

        if (productsInput) {
            const products = await this.productRepository.find({ id: productsInput });
            if (products.length != productsInput.length) throw new Error("Couldn't find all products that were passed as input");
            await order.products.loadItems();
            order.products.set(products.map((product) => Reference.create(product)));
        }

        await this.entityManager.flush();

        return order;
    }

    @Mutation(() => Boolean)
    @SubjectEntity(Order)
    async deleteOrder(@Args("id", { type: () => ID }) id: string): Promise<boolean> {
        const order = await this.repository.findOneOrFail(id);
        await this.entityManager.remove(order);
        await this.entityManager.flush();
        return true;
    }

    @ResolveField(() => Customer)
    async customer(@Parent() order: Order): Promise<Customer> {
        return order.customer.load();
    }

    @ResolveField(() => [Product])
    async products(@Parent() order: Order): Promise<Product[]> {
        return order.products.loadItems();
    }
}
