# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AttachedDocumentInput {
  id: String
  type: String!
}

type AutoBuildStatus {
  hasChangesSinceLastBuild: Boolean!
  lastCheck: DateTime
  nextCheck: DateTime!
}

type AvailableContentScopeValues {
  label: String!
  value: String!
}

type AvailableContentScopes {
  label: String!
  scope: String!
  values: [AvailableContentScopeValues!]!
}

type AvailablePermission {
  description: String
  name: String!
  permission: String!
}

input BooleanFilter {
  equal: Boolean
}

type Build {
  completionTime: DateTime
  estimatedCompletionTime: DateTime
  id: ID!
  name: String
  startTime: DateTime
  status: JobStatus!
  trigger: String
}

type BuildTemplate {
  id: ID!
  name: String!
}

input CreateBuildsInput {
  names: [String!]!
}

input CreateDamFolderInput {
  name: String!
  parentId: ID
}

input CreateUserPermissionInput {
  approvedBy: String
  configuration: JSONObject
  permission: String!
  reason: String
  requestedBy: String
  userId: String!
  validFrom: DateTime
  validTo: DateTime
}

type CronJob {
  id: ID!
  lastScheduledAt: DateTime
  name: String!
  schedule: String!
}

type CurrentUser {
  contentScopes: [CurrentUserContentScope!]!
  email: String!
  id: String!
  language: String!
  name: String!
  permissions: [CurrentUserPermission!]!
}

type CurrentUserContentScope {
  label: String!
  scope: String!
  values: [CurrentUserContentScopeValue!]!
}

type CurrentUserContentScopeValue {
  label: String!
  value: String!
}

type CurrentUserPermission {
  configuration: JSONObject
  contentScopes: [CurrentUserContentScope!]!
  name: String!
  overrideContentScopes: Boolean!
}

type DamFile {
  altText: String
  archived: Boolean!
  contentHash: String!
  createdAt: DateTime!
  damPath: String!
  dependents: [Dependency!]!
  duplicates: [DamFile!]!
  fileUrl: String!
  folder: DamFolder
  id: ID!
  image: DamFileImage
  license: DamFileLicense
  mimetype: String!
  name: String!
  scope: DamScope!
  size: Int!
  title: String
  updatedAt: DateTime!
}

type DamFileImage {
  cropArea: ImageCropArea!
  dominantColor: String
  exif: JSONObject
  height: Int!
  id: ID!
  url(height: Int!, width: Int!): String
  width: Int!
}

type DamFileLicense {
  author: String
  details: String
  durationFrom: DateTime
  durationTo: DateTime

  """The expirationDate is the durationTo + 1 day"""
  expirationDate: DateTime
  expiresWithinThirtyDays: Boolean!
  hasExpired: Boolean!
  isNotValidYet: Boolean!
  isValid: Boolean!
  type: LicenseType
}

type DamFolder {
  archived: Boolean!
  createdAt: DateTime!
  id: ID!
  mpath: [ID!]!
  name: String!
  numberOfChildFolders: Int!
  numberOfFiles: Int!
  parent: DamFolder
  parents: [DamFolder!]!
  scope: DamScope!
  updatedAt: DateTime!
}

"""DamImage root block data"""
scalar DamImageBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""DamImage root block input"""
scalar DamImageBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

union DamItem = DamFile | DamFolder

input DamItemFilterInput {
  mimetypes: [String!]
  searchText: String
}

enum DamItemType {
  File
  Folder
}

type DamScope {
  domain: String!
}

input DamScopeInput {
  domain: String!
}

input DateFilter {
  equal: DateTime
  greaterThan: DateTime
  greaterThanEqual: DateTime
  lowerThan: DateTime
  lowerThanEqual: DateTime
  notEqual: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Dependency {
  jsonPath: String!
  rootColumnName: String!
  rootGraphqlObjectType: String!
  rootId: String!
  targetGraphqlObjectType: String!
  targetId: String!
  visible: Boolean!
}

interface DocumentInterface {
  id: ID!
  updatedAt: DateTime!
}

input FileFilterInput {
  mimetypes: [String!]
  searchText: String
}

input FilenameInput {
  folderId: ID
  name: String!
}

type FilenameResponse {
  folderId: ID
  isOccupied: Boolean!
  name: String!
}

enum FocalPoint {
  CENTER
  NORTHEAST
  NORTHWEST
  SMART
  SOUTHEAST
  SOUTHWEST
}

input FolderFilterInput {
  searchText: String
}

type Footer implements DocumentInterface {
  content: FooterContentBlockData!
  createdAt: DateTime!
  dependencies: [Dependency!]!
  id: ID!
  scope: FooterContentScope!
  updatedAt: DateTime!
}

"""FooterContent root block data"""
scalar FooterContentBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""FooterContent root block input"""
scalar FooterContentBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type FooterContentScope {
  domain: String!
  language: String!
}

input FooterContentScopeInput {
  domain: String!
  language: String!
}

input FooterInput {
  content: FooterContentBlockInput!
}

type ImageCropArea {
  focalPoint: FocalPoint!
  height: Float
  width: Float
  x: Float
  y: Float
}

input ImageCropAreaInput {
  focalPoint: FocalPoint!
  height: Float
  width: Float
  x: Float
  y: Float
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum JobStatus {
  active
  failed
  pending
  succeeded
}

input LicenseInput {
  author: String
  details: String
  durationFrom: DateTime
  durationTo: DateTime
  type: LicenseType
}

enum LicenseType {
  MICRO
  RIGHTS_MANAGED
  ROYALTY_FREE
  SUBSCRIPTION
}

type Link implements DocumentInterface {
  content: LinkBlockData!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

"""Link root block data"""
scalar LinkBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Link root block input"""
scalar LinkBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LinkInput {
  content: LinkBlockInput!
}

type MainMenu {
  items: [MainMenuItem!]!
}

type MainMenuItem {
  content: RichTextBlockData
  createdAt: DateTime!
  dependencies: [Dependency!]!
  id: ID!
  node: PageTreeNode!
  updatedAt: DateTime!
}

input MainMenuItemInput {
  content: RichTextBlockInput
}

input MovePageTreeNodesByNeighbourInput {
  afterId: String
  beforeId: String
  parentId: String
}

input MovePageTreeNodesByPosInput {
  parentId: String
  pos: Int!
}

type Mutation {
  archiveDamFile(id: ID!): DamFile!
  archiveDamFiles(ids: [ID!]!): [DamFile!]!
  createBuilds(input: CreateBuildsInput!): Boolean!
  createDamFolder(input: CreateDamFolderInput!, scope: DamScopeInput!): DamFolder!
  createNews(input: NewsInput!, scope: NewsContentScopeInput!): News!
  createNewsComment(input: NewsCommentInput!, newsId: ID!): NewsComment!
  createPageTreeNode(category: String!, input: PageTreeNodeCreateInput!, scope: PageTreeNodeScopeInput!): PageTreeNode!
  createProduct(input: ProductInput!): Product!
  createRedirect(input: RedirectInput!, scope: RedirectScopeInput!): Redirect!
  currentUserSignOut: String!
  deleteDamFile(id: ID!): Boolean!
  deleteDamFolder(id: ID!): Boolean!
  deleteNews(id: ID!): Boolean!
  deleteNewsComment(id: ID!): Boolean!
  deletePageTreeNode(id: ID!): Boolean!
  deleteProduct(id: ID!): Boolean!
  deleteRedirect(id: ID!): Boolean!
  moveDamFiles(fileIds: [ID!]!, targetFolderId: ID): [DamFile!]!
  moveDamFolders(folderIds: [ID!]!, scope: DamScopeInput!, targetFolderId: ID): [DamFolder!]!
  movePageTreeNodesByNeighbour(ids: [ID!]!, input: MovePageTreeNodesByNeighbourInput!): [PageTreeNode!]!
  movePageTreeNodesByPos(ids: [ID!]!, input: MovePageTreeNodesByPosInput!): [PageTreeNode!]!
  restoreDamFile(id: ID!): DamFile!
  restoreDamFiles(ids: [ID!]!): [DamFile!]!
  saveFooter(input: FooterInput!, lastUpdatedAt: DateTime, scope: FooterContentScopeInput!): Footer!
  saveLink(attachedPageTreeNodeId: ID!, input: LinkInput!, lastUpdatedAt: DateTime, linkId: ID!): Link!
  savePage(attachedPageTreeNodeId: ID!, input: PageInput!, lastUpdatedAt: DateTime, pageId: ID!): Page!
  savePredefinedPage(attachedPageTreeNodeId: ID!, id: ID!, input: PredefinedPageInput!, lastUpdatedAt: DateTime): PredefinedPage!
  updateDamFile(id: ID!, input: UpdateDamFileInput!): DamFile!
  updateDamFolder(id: ID!, input: UpdateDamFolderInput!): DamFolder!
  updateMainMenuItem(input: MainMenuItemInput!, lastUpdatedAt: DateTime, pageTreeNodeId: ID!): MainMenuItem!
  updateNews(id: ID!, input: NewsUpdateInput!, lastUpdatedAt: DateTime): News!
  updateNewsComment(id: ID!, input: NewsCommentInput!, lastUpdatedAt: DateTime): NewsComment!
  updateNewsVisibility(id: ID!, visible: Boolean!): News!
  updatePageTreeNode(id: ID!, input: PageTreeNodeUpdateInput!): PageTreeNode!
  updatePageTreeNodeCategory(category: String!, id: ID!): PageTreeNode!
  updatePageTreeNodeSlug(id: ID!, slug: String!): PageTreeNode!
  updatePageTreeNodeVisibility(id: ID!, input: PageTreeNodeUpdateVisibilityInput!): PageTreeNode!
  updateProduct(id: ID!, input: ProductUpdateInput!, lastUpdatedAt: DateTime): Product!
  updateProductVisibility(id: ID!, visible: Boolean!): Product!
  updateRedirect(id: ID!, input: RedirectInput!, lastUpdatedAt: DateTime): Redirect!
  updateRedirectActiveness(id: ID!, input: RedirectUpdateActivenessInput!): Redirect!
  userManagementCreatePermission(data: CreateUserPermissionInput!): UserPermission!
  userManagementDeletePermission(id: ID!): Boolean!
  userManagementSetContentScope(input: UserContentScopesInput!): UserContentScopes!
  userManagementSetPermissionContentScopes(data: UserPermissionContentScopesInput!): UserPermission!
  userManagementUpdatePermission(data: UpdateUserPermissionInput!): UserPermission!
}

type News implements DocumentInterface {
  category: NewsCategory!
  comments: [NewsComment!]!
  content: NewsContentBlockData!
  createdAt: DateTime!
  date: DateTime!
  dependencies: [Dependency!]!
  dependents: [Dependency!]!
  id: ID!
  image: DamImageBlockData!
  scope: NewsContentScope!
  slug: String!
  title: String!
  updatedAt: DateTime!
  visible: Boolean!
}

enum NewsCategory {
  Awards
  Company
  Events
}

input NewsCategoryEnumFilter {
  equal: NewsCategory
  isAnyOf: [NewsCategory!]
  notEqual: NewsCategory
}

type NewsComment implements DocumentInterface {
  comment: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input NewsCommentInput {
  comment: String!
}

"""NewsContent root block data"""
scalar NewsContentBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""NewsContent root block input"""
scalar NewsContentBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type NewsContentScope {
  domain: String!
  language: String!
}

input NewsContentScopeInput {
  domain: String!
  language: String!
}

input NewsFilter {
  and: [NewsFilter!]
  category: NewsCategoryEnumFilter
  createdAt: DateFilter
  date: DateFilter
  or: [NewsFilter!]
  slug: StringFilter
  title: StringFilter
  updatedAt: DateFilter
  visible: BooleanFilter
}

input NewsInput {
  category: NewsCategory!
  content: NewsContentBlockInput!
  date: DateTime!
  image: DamImageBlockInput!
  slug: String!
  title: String!
}

input NewsSort {
  direction: SortDirection! = ASC
  field: NewsSortField!
}

enum NewsSortField {
  category
  createdAt
  date
  slug
  title
  updatedAt
  visible
}

input NewsUpdateInput {
  category: NewsCategory
  content: NewsContentBlockInput
  date: DateTime
  image: DamImageBlockInput
  slug: String
  title: String
}

input NumberFilter {
  equal: Float
  greaterThan: Float
  greaterThanEqual: Float
  lowerThan: Float
  lowerThanEqual: Float
  notEqual: Float
}

type Page implements DocumentInterface {
  content: PageContentBlockData!
  createdAt: DateTime!
  dependencies: [Dependency!]!
  id: ID!
  pageTreeNode: PageTreeNode
  seo: SeoBlockData!
  updatedAt: DateTime!
}

"""PageContent root block data"""
scalar PageContentBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""PageContent root block input"""
scalar PageContentBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

union PageContentUnion = Link | Page | PredefinedPage

input PageInput {
  content: PageContentBlockInput!
  seo: SeoBlockInput!
}

type PageTreeNode {
  category: PageTreeNodeCategory!
  childNodes: [PageTreeNode!]!
  dependents: [Dependency!]!
  document: PageContentUnion
  documentType: String!
  hideInMenu: Boolean!
  id: ID!
  name: String!
  parentId: String
  parentNode: PageTreeNode
  parentNodes: [PageTreeNode!]!
  path: String!
  pos: Int!
  scope: PageTreeNodeScope!
  slug: String!
  userGroup: UserGroup!
  visibility: PageTreeNodeVisibility!
}

enum PageTreeNodeCategory {
  MainNavigation
  TopMenu
}

input PageTreeNodeCreateInput {
  attachedDocument: AttachedDocumentInput!
  hideInMenu: Boolean
  id: ID
  name: String!
  parentId: String
  pos: Int
  slug: String!
  userGroup: UserGroup! = All
}

type PageTreeNodeScope {
  domain: String!
  language: String!
}

input PageTreeNodeScopeInput {
  domain: String!
  language: String!
}

input PageTreeNodeUpdateInput {
  attachedDocument: AttachedDocumentInput!
  hideInMenu: Boolean
  name: String!
  slug: String!
  userGroup: UserGroup! = All
}

input PageTreeNodeUpdateVisibilityInput {
  visibility: PageTreeNodeVisibility!
}

enum PageTreeNodeVisibility {
  Archived
  Published
  Unpublished
}

type PaginatedDamFiles {
  nodes: [DamFile!]!
  totalCount: Int!
}

type PaginatedDamFolders {
  nodes: [DamFolder!]!
  totalCount: Int!
}

type PaginatedDamItems {
  nodes: [DamItem!]!
  totalCount: Int!
}

type PaginatedNews {
  nodes: [News!]!
  totalCount: Int!
}

type PaginatedPages {
  nodes: [Page!]!
  totalCount: Int!
}

type PaginatedProducts {
  nodes: [Product!]!
  totalCount: Int!
}

type PaginatedRedirects {
  nodes: [Redirect!]!
  totalCount: Int!
}

type PaginatedUserList {
  nodes: [User!]!
  totalCount: Int!
}

type PredefinedPage implements DocumentInterface {
  createdAt: DateTime!
  id: ID!
  type: String
  updatedAt: DateTime!
}

input PredefinedPageInput {
  type: String
}

type Product implements DocumentInterface {
  createdAt: DateTime!
  description: String!
  id: ID!
  image: DamImageBlockData!
  inStock: Boolean!
  price: Float
  slug: String!
  title: String!
  type: ProductType!
  updatedAt: DateTime!
  visible: Boolean!
}

input ProductFilter {
  and: [ProductFilter!]
  createdAt: DateFilter
  description: StringFilter
  inStock: BooleanFilter
  or: [ProductFilter!]
  price: NumberFilter
  slug: StringFilter
  title: StringFilter
  type: ProductTypeEnumFilter
  updatedAt: DateFilter
  visible: BooleanFilter
}

input ProductInput {
  description: String!
  image: DamImageBlockInput!
  inStock: Boolean!
  price: Float
  slug: String!
  title: String!
  type: ProductType!
}

input ProductSort {
  direction: SortDirection! = ASC
  field: ProductSortField!
}

enum ProductSortField {
  createdAt
  description
  inStock
  price
  slug
  title
  type
  updatedAt
  visible
}

enum ProductType {
  Cap
  Shirt
  Tie
}

input ProductTypeEnumFilter {
  equal: ProductType
  isAnyOf: [ProductType!]
  notEqual: ProductType
}

input ProductUpdateInput {
  description: String
  image: DamImageBlockInput
  inStock: Boolean
  price: Float
  slug: String
  title: String
  type: ProductType
}

type Query {
  autoBuildStatus: AutoBuildStatus!
  buildTemplates: [BuildTemplate!]!
  builds(limit: Float): [Build!]!
  cronJobs: [CronJob!]!
  currentUser: CurrentUser!
  damAreFilenamesOccupied(filenames: [FilenameInput!]!, scope: DamScopeInput!): [FilenameResponse!]!
  damFile(id: ID!): DamFile!
  damFilesList(filter: FileFilterInput, folderId: ID, includeArchived: Boolean = false, limit: Int! = 25, offset: Int! = 0, scope: DamScopeInput!, sortColumnName: String, sortDirection: SortDirection! = ASC): PaginatedDamFiles!
  damFolder(id: ID!): DamFolder!
  damFolderByNameAndParentId(name: String!, parentId: ID, scope: DamScopeInput!): DamFolder
  damFoldersFlat(scope: DamScopeInput!): [DamFolder!]!
  damFoldersList(filter: FolderFilterInput, includeArchived: Boolean, limit: Int! = 25, offset: Int! = 0, parentId: ID, scope: DamScopeInput!, sortColumnName: String, sortDirection: SortDirection! = ASC): PaginatedDamFolders!
  damIsFilenameOccupied(filename: String!, folderId: String, scope: DamScopeInput!): Boolean!
  damItemListPosition(filter: DamItemFilterInput, folderId: ID, id: ID!, includeArchived: Boolean, scope: DamScopeInput!, sortColumnName: String, sortDirection: SortDirection! = ASC, type: DamItemType!): Float!
  damItemsList(filter: DamItemFilterInput, folderId: ID, includeArchived: Boolean, limit: Int! = 25, offset: Int! = 0, scope: DamScopeInput!, sortColumnName: String, sortDirection: SortDirection! = ASC): PaginatedDamItems!
  footer(scope: FooterContentScopeInput!): Footer
  link(linkId: ID!): Link
  mainMenu(scope: PageTreeNodeScopeInput!): MainMenu!
  mainMenuItem(pageTreeNodeId: ID!): MainMenuItem!
  news(id: ID!): News!
  newsBySlug(slug: String!): News
  newsList(filter: NewsFilter, limit: Int! = 25, offset: Int! = 0, scope: NewsContentScopeInput!, search: String, sort: [NewsSort!]): PaginatedNews!
  pageTreeNode(id: ID!): PageTreeNode
  pageTreeNodeByPath(path: String!, scope: PageTreeNodeScopeInput!): PageTreeNode
  pageTreeNodeForPredefinedPage(scope: PageTreeNodeScopeInput!, type: String!): PageTreeNode
  pageTreeNodeList(category: String, scope: PageTreeNodeScopeInput!): [PageTreeNode!]!
  pageTreeNodeSlugAvailable(parentId: ID, scope: PageTreeNodeScopeInput!, slug: String!): SlugAvailability!
  pages(limit: Int! = 25, offset: Int! = 0, sortColumnName: String, sortDirection: SortDirection! = ASC): PaginatedPages!
  paginatedRedirects(filter: RedirectFilter, limit: Int! = 25, offset: Int! = 0, scope: RedirectScopeInput!, search: String, sort: [RedirectSort!]): PaginatedRedirects!
  predefinedPage(id: ID!): PredefinedPage
  product(id: ID!): Product!
  productBySlug(slug: String!): Product
  products(filter: ProductFilter, limit: Int! = 25, offset: Int! = 0, search: String, sort: [ProductSort!]): PaginatedProducts!
  redirect(id: ID!): Redirect!
  redirectSourceAvailable(scope: RedirectScopeInput!, source: String!): Boolean!
  redirects(active: Boolean, query: String, scope: RedirectScopeInput!, sortColumnName: String, sortDirection: SortDirection! = ASC, type: RedirectGenerationType): [Redirect!]! @deprecated(reason: "Use paginatedRedirects instead. Will be removed in the next version.")
  topMenu(scope: PageTreeNodeScopeInput!): [PageTreeNode!]!
  userManagementAvailableContentScopes: [AvailableContentScopes!]!
  userManagementAvailablePermissions: [AvailablePermission!]!
  userManagementContentScope(skipManual: Boolean, userId: String!): UserContentScopes!
  userManagementPermission(id: ID!, userId: String): UserPermission!
  userManagementPermissionList(userId: String!): [UserPermission!]!
  userManagementUserById(id: String!): User!
  userManagementUsers(filter: UserFilter, limit: Int! = 25, offset: Int! = 0, search: String, sort: [UserSort!]): PaginatedUserList!
}

type Redirect implements DocumentInterface {
  active: Boolean!
  comment: String
  createdAt: DateTime!
  dependencies: [Dependency!]!
  generationType: RedirectGenerationType!
  id: ID!
  scope: RedirectScope!
  source: String!
  sourceType: RedirectSourceTypeValues!
  target: JSONObject!
  updatedAt: DateTime!
}

input RedirectFilter {
  active: BooleanFilter
  and: [RedirectFilter!]
  createdAt: DateFilter
  generationType: StringFilter
  or: [RedirectFilter!]
  source: StringFilter
  updatedAt: DateFilter
}

enum RedirectGenerationType {
  automatic
  manual
}

input RedirectInput {
  active: Boolean
  comment: String
  generationType: RedirectGenerationType!
  source: String!
  sourceType: RedirectSourceTypeValues!
  target: JSONObject!
}

type RedirectScope {
  domain: String!
}

input RedirectScopeInput {
  domain: String!
}

input RedirectSort {
  direction: SortDirection! = ASC
  field: RedirectSortField!
}

enum RedirectSortField {
  createdAt
  source
  updatedAt
}

enum RedirectSourceTypeValues {
  path
}

input RedirectUpdateActivenessInput {
  active: Boolean!
}

"""RichText root block data"""
scalar RichTextBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""RichText root block input"""
scalar RichTextBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Seo root block data"""
scalar SeoBlockData @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Seo root block input"""
scalar SeoBlockInput @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum SlugAvailability {
  Available
  Reserved
  Taken
}

enum SortDirection {
  ASC
  DESC
}

input StringFilter {
  contains: String
  endsWith: String
  equal: String
  notEqual: String
  startsWith: String
}

input UpdateDamFileInput {
  altText: String
  folderId: ID
  image: UpdateImageFileInput
  license: LicenseInput
  name: String
  title: String
}

input UpdateDamFolderInput {
  archived: Boolean
  name: String
  parentId: ID
}

input UpdateImageFileInput {
  cropArea: ImageCropAreaInput
}

input UpdateUserPermissionInput {
  approvedBy: String
  configuration: JSONObject
  id: ID!
  permission: String
  reason: String
  requestedBy: String
  validFrom: DateTime
  validTo: DateTime
}

type User {
  email: String!
  id: String!
  language: String!
  name: String!
  status: UserStatus!
}

type UserContentScope {
  scope: String!
  values: [String!]!
}

input UserContentScopeInput {
  scope: String!
  values: [String!]!
}

type UserContentScopes {
  scopes: [UserContentScope!]!
  userId: String!
}

input UserContentScopesInput {
  scopes: [UserContentScopeInput!]!
  userId: String!
}

input UserFilter {
  and: [UserFilter!]
  email: StringFilter
  language: StringFilter
  name: StringFilter
  or: [UserFilter!]
  status: StringFilter
}

enum UserGroup {
  Admin
  All
  User
}

type UserPermission {
  approvedBy: String
  configuration: JSONObject
  contentScopes: [UserContentScope!]!
  description: String
  id: ID!
  name: String!
  overrideContentScopes: Boolean!
  permission: String!
  reason: String
  requestedBy: String
  source: UserPermissionSource
  validFrom: DateTime
  validTo: DateTime
}

input UserPermissionContentScopeInput {
  scope: String!
  values: [String!]! = []
}

input UserPermissionContentScopesInput {
  contentScopes: [UserPermissionContentScopeInput!]! = []
  overrideContentScopes: Boolean!
  permissionId: ID!
}

enum UserPermissionSource {
  BY_RULE
  MANUAL
}

input UserSort {
  direction: SortDirection! = ASC
  field: UserSortField!
}

enum UserSortField {
  email
  language
  name
  status
}

enum UserStatus {
  ACTIVE
  INACTIVE
}
